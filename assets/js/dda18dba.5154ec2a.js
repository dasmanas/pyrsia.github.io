(self.webpackChunkpyrsia=self.webpackChunkpyrsia||[]).push([[9713],{30685:function(e,t,a){"use strict";a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return d},default:function(){return m},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var n=a(87462),s=a(63366),o=(a(67294),a(3905)),r=a(93456),i=["components"],l={custom_edit_url:"https://github.com/pyrsia/pyrsia/edit/main/docs/tutorials/demo.md"},d="Demo on two Ubuntu instances",c={unversionedId:"tutorials/demo",id:"tutorials/demo",title:"Demo on two Ubuntu instances",description:"This demo tutorial is a first step in demonstrating Pyrsia's capabilities.",source:"@site/docs/tutorials/demo.md",sourceDirName:"tutorials",slug:"/tutorials/demo",permalink:"/docs/tutorials/demo",draft:!1,editUrl:"https://github.com/pyrsia/pyrsia/edit/main/docs/tutorials/demo.md",tags:[],version:"current",frontMatter:{custom_edit_url:"https://github.com/pyrsia/pyrsia/edit/main/docs/tutorials/demo.md"},sidebar:"tutorialSidebar",previous:{title:"Quick Installation",permalink:"/docs/tutorials/quick-installation"},next:{title:"How to run 2 Pyrsia nodes natively on 1 MacOS machine",permalink:"/docs/tutorials/setup_on_macosx"}},p={},u=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Demo Scenario",id:"demo-scenario",level:2},{value:"Install and configure Pyrsia",id:"install-and-configure-pyrsia",level:2},{value:"Install Pyrsia",id:"install-pyrsia",level:3},{value:"Edit configuration",id:"edit-configuration",level:3},{value:"Use the CLI to check the node status",id:"use-the-cli-to-check-the-node-status",level:3},{value:"Tail the log",id:"tail-the-log",level:3},{value:"Use Pyrsia",id:"use-pyrsia",level:2}],k={toc:u};function m(e){var t=e.components,a=(0,s.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},k,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"demo-on-two-ubuntu-instances"},"Demo on two Ubuntu instances"),(0,o.kt)("p",null,"This demo tutorial is a first step in demonstrating Pyrsia's capabilities.\nYou will setup two Pyrsia nodes on two separate Ubuntu instances, wire them\ntogether in a very small p2p network, and use the regular Docker client on\nUbuntu to pull images off the Pyrsia network. The Pyrsia nodes use Docker Hub\nas a fallback mechanism in case the image is not yet available in the Pyrsia\nnetwork."),(0,o.kt)(r.Mermaid,{config:{},chart:"flowchart TB\n    subgraph Instance 1\n      docker[Docker Client]--\x3ePyrsiaNode1[Pyrsia Node]\n    end\n    subgraph Instance 2\n      docker2[Docker Client]--\x3ePyrsiaNode2[Pyrsia Node]\n    end\n    PyrsiaNode1--\x3ePyrsiaNode2\n    PyrsiaNode2--\x3ePyrsiaNode1\n    PyrsiaNode1--\x3eDockerHub[Docker Hub]",mdxType:"Mermaid"}),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Two Ubuntu instances with public IPs that allow inbound TCP traffic on port 44000.\nWe will refer to them as:"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"node1")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"node2")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We assume you have Docker installed. Follow these ",(0,o.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/install/ubuntu/"},"instructions")," if you do not."))),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"If you ran these steps before and if you want to start from a clean sheet, do this:"),(0,o.kt)("pre",{parentName:"blockquote"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"apt-get remove pyrsia\nrm -rf /usr/local/var/pyrsia\n"))),(0,o.kt)("h2",{id:"demo-scenario"},"Demo Scenario"),(0,o.kt)("p",null,"This demo consists of several steps: (scroll down for instructions)"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"#install-and-configure-pyrsia"},"Installation and configuration"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Install and configure Pyrsia on ",(0,o.kt)("inlineCode",{parentName:"li"},"node1")),(0,o.kt)("li",{parentName:"ul"},"Install and configure Pyrsia on ",(0,o.kt)("inlineCode",{parentName:"li"},"node2"),", make it connect to ",(0,o.kt)("inlineCode",{parentName:"li"},"node1")))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"#use-pyrsia"},"Docker pull on ",(0,o.kt)("inlineCode",{parentName:"a"},"node1")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"image is not available in the Pyrsia network"),(0,o.kt)("li",{parentName:"ul"},"image is requested from Docker Hub and stored locally, so it becomes\navailable in the Pyrsia network"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"#use-the-cli-to-check-the-node-status"},"Use the Pyrsia CLI to check ",(0,o.kt)("inlineCode",{parentName:"a"},"node1")," status")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"#use-pyrsia"},"Docker pull on ",(0,o.kt)("inlineCode",{parentName:"a"},"node2")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"The same Docker image is pulled on ",(0,o.kt)("inlineCode",{parentName:"li"},"node2")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"node2")," requests the image from the Pyrsia network, in this specific case: ",(0,o.kt)("inlineCode",{parentName:"li"},"node1"),"."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"#use-the-cli-to-check-the-node-status"},"Use the Pyrsia CLI to check ",(0,o.kt)("inlineCode",{parentName:"a"},"node2")," status")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"#use-pyrsia"},"Docker pull on ",(0,o.kt)("inlineCode",{parentName:"a"},"node2")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"The same Docker image is pulled again on ",(0,o.kt)("inlineCode",{parentName:"li"},"node2")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"node2")," doesn't have to download the image again")))),(0,o.kt)("p",null,"These are the steps in more detail:"),(0,o.kt)(r.Mermaid,{chart:"sequenceDiagram\nparticipant User as User\nparticipant Docker1 as Docker Daemon on node1\nparticipant Node1 as Pyrsia Node on node1\nparticipant PNW as Pyrsia Network\nparticipant Docker2 as Docker Daemon on node2\nparticipant Node2 as Pyrsia Node on node2\nparticipant DockerHub as Docker Hub\n\nUser ->> Node1: Installs Pyrsia\nactivate User\nnote left of User: Installation\nUser ->> Node2: Installs Pyrsia and configures it to connect to node1\n\nNode2 ->> Node1: Connects to peer node1 on port 44000<br>node1 and node2 now form the 'Pyrsia Network'\n\ndeactivate User\n\n\nUser ->> Docker1: docker pull image\nactivate User\nnote left of User: Pull on node1\nDocker1 ->> Node1: request image through the Docker<br>Registry API running inside the Pyrsia node on port 7888\nNode1 ->> PNW: Node1 checks if the image is available<br>locally or on the Pyrsia network\nNode1 ->> DockerHub: The image is not available and Node1<br>requests the image from Docker Hub\nNode1 ->> PNW: Node1 stores the image locally<br>and announces it availability on the Pyrsia Network\nNode1 ->> Docker1: The Pyrsia node responds with the requested image\nDocker1 ->> User: docker pull is completed successfully\ndeactivate User\n\nUser ->> Node1: pyrsia status the user uses the CLI to ask the<br>status the CLI connects to the Pyrsia node on port 7888\nactivate User\ndeactivate User\nnote left of User: Check Pyrsia<br>node status\n\nUser ->> Docker2: docker pull image\nactivate User\nnote left of User: Pull on node2\nDocker2 ->> Node2: request image through the Docker Registry API<br>running inside the Pyrsia node on port 7888\n\nNode2 ->> PNW: Node2 checks if the image is available locally<br>or on the Pyrsia network<br>In this case, it is available on Node1\n\nNode2 ->> Node1: Node2 connects to port 44000 on Node1<br>to request and download the artifact\nNode2 ->> PNW: Node2 stores the artifact locally and announces itself<br>as a provider for this artifact as well.\nNode2 ->> Docker2: The Pyrsia node responds with the requested image\nDocker2 ->> User: docker pull is completed successfully\ndeactivate User\n\nUser ->> Node2: pyrsia node --status the user uses the CLI to ask the status<br>the CLI connects to the Pyrsia node on port 7888\nactivate User\ndeactivate User\nnote left of User: Check Pyrsia<br>node status\n\n\nUser ->> Docker2: docker pull image\nactivate User\nnote left of User: Pull again on node2\nDocker2 ->> Node2: request image through the Docker Registry API<br>running inside the Pyrsia node on port 7888\nNode2 ->> Docker2: The Pyrsia node responds with the requested image<br>because it was already available locally\nDocker2 ->> User: Docker pull is completed successfully\ndeactivate User",mdxType:"Mermaid"}),(0,o.kt)("h2",{id:"install-and-configure-pyrsia"},"Install and configure Pyrsia"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"IMPORTANT: run the installation phase as ",(0,o.kt)("inlineCode",{parentName:"p"},"root"),".")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"On both instances:")),(0,o.kt)("h3",{id:"install-pyrsia"},"Install Pyrsia"),(0,o.kt)("p",null,"Follow the instructions below or have a look at the latest ",(0,o.kt)("a",{parentName:"p",href:"https://pyrsia.io/docs/tutorials/quick-installation/"},"Pyrsia documentation"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"curl -sS https://pyrsia.io/install.sh | sh\n")),(0,o.kt)("p",null,"or run the commands listed below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'# Update system and install base tooling\nsudo apt-get update\nsudo apt-get install -y wget gnupg\n\n# Add the Pyrsia keys to verify packages\nwget -q -O - https://repo.pyrsia.io/repos/Release.key |  gpg --dearmor  > pyrsia.gpg\nsudo install -o root -g root -m 644 pyrsia.gpg /etc/apt/trusted.gpg.d/\nrm pyrsia.gpg\necho "deb https://repo.pyrsia.io/repos/nightly focal main" | sudo tee -a /etc/apt/sources.list > /dev/null\nsudo apt-get update\n\n# Install\nsudo apt-get install -y pyrsia\n')),(0,o.kt)("h3",{id:"edit-configuration"},"Edit configuration"),(0,o.kt)("p",null,"Both nodes will already be listening on port 44000 when it starts.\nLet's now edit the configuration on node2 to connect to node1 at startup."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"On ",(0,o.kt)("inlineCode",{parentName:"strong"},"node2"),":")),(0,o.kt)("p",null,"Edit ",(0,o.kt)("inlineCode",{parentName:"p"},"/etc/systemd/system/multi-user.target.wants/pyrsia.service")," and add\n",(0,o.kt)("inlineCode",{parentName:"p"},"--peer /ip4/public_ip_of_node1/tcp/44000")," to the ",(0,o.kt)("inlineCode",{parentName:"p"},"ExecStart")," line so it looks\nlike this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"ExecStart=/usr/bin/pyrsia_node --host 0.0.0.0 -L /ip4/0.0.0.0/tcp/44000 --peer /ip4/public_ip_of_node1/tcp/44000\n")),(0,o.kt)("p",null,"This will make sure ",(0,o.kt)("inlineCode",{parentName:"p"},"node2")," connects to peer ",(0,o.kt)("inlineCode",{parentName:"p"},"node1")," when it starts."),(0,o.kt)("p",null,"Reload the daemon configuration:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"systemctl daemon-reload\n")),(0,o.kt)("p",null,"Restart the Pyrsia node:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"service pyrsia restart\n")),(0,o.kt)("p",null,"Check the daemon status:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"service pyrsia status\n")),(0,o.kt)("p",null,"You should see something very similar to:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"\u25cf pyrsia.service - Pyrsia Node\n     Loaded: loaded (/lib/systemd/system/pyrsia.service; enabled; vendor preset: enabled)\n     Active: active (running) since Wed 2022-03-23 14:29:55 UTC; 5min ago\n   Main PID: 42619 (pyrsia_node)\n      Tasks: 11 (limit: 19189)\n     Memory: 3.4M\n     CGroup: /system.slice/pyrsia.service\n             \u2514\u250042619 /usr/bin/pyrsia_node -H 127.0.0.1 --peer /ip4/1.2.3.4/tcp/44000 -L /ip4/0.0.0.0/tcp/44000\n")),(0,o.kt)("h3",{id:"use-the-cli-to-check-the-node-status"},"Use the CLI to check the node status"),(0,o.kt)("p",null,"Check the node status:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"pyrsia -s\n")),(0,o.kt)("p",null,"You should see something very similar to:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'Connected Peers Count:       1\nArtifacts Count:             3 {"manifests": 1, "blobs": 2}\nTotal Disk Space Allocated:  5.84 GB\nDisk Space Used:             0.0002%\n')),(0,o.kt)("p",null,"List the node's peers:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"pyrsia -l\n")),(0,o.kt)("p",null,"You should see something very similar to:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'Connected Peers:\n["12D3KooWMD9ynPTdvhWMcdX7mh23Au1QpVS3ekTCQzpRTtd1g6h3"]\n')),(0,o.kt)("h3",{id:"tail-the-log"},"Tail the log"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"tail -f /var/log/syslog\n")),(0,o.kt)("p",null,"You should see something very similar to:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'Mar 23 14:37:08 demo-pyrsia-node-2 pyrsia_node[42678]:  DEBUG multistream_select::dialer_select > Dialer: Proposed protocol: /ipfs/id/1.0.0\nMar 23 14:37:08 demo-pyrsia-node-2 pyrsia_node[42678]:  DEBUG multistream_select::dialer_select > Dialer: Received confirmation for protocol: /ipfs/id/1.0.0\nMar 23 14:37:08 demo-pyrsia-node-2 pyrsia_node[42678]:  DEBUG libp2p_core::upgrade::apply       > Successfully applied negotiated protocol\nMar 23 14:37:08 demo-pyrsia-node-2 pyrsia_node[42678]: Identify::Received: 12D3KooWMD9ynPTdvhWMcdX7mh23Au1QpVS3ekTCQzpRTtd1g6h3; IdentifyInfo { public_key: Ed25519(PublicKey(compressed): a94721f6a984901ec913ca8fac3963103f9f5f45fa5c484e9df8db469ab1e), protocol_version: "ipfs/1.0.0", agent_version: "rust-libp2p/0.34.0", listen_addrs: ["/ip4/1.1.1.1/tcp/44000", "/ip4/127.0.0.1/tcp/44000", "/ip4/10.128.0.14/tcp/44000", "/ip4/172.17.0.1/tcp/44000"], protocols: ["/ipfs/id/1.0.0", "/ipfs/id/push/1.0.0", "/ipfs/kad/1.0.0", "/file-exchange/1"], observed_addr: "/ip4/2.2.2.2/tcp/52012" }\nMar 23 14:37:08 demo-pyrsia-node-2 pyrsia_node[42678]:  DEBUG pyrsia::network::p2p  > Identify::Received: adding address "/ip4/34.66.158.102/tcp/44000" for peer 12D3KooWMD9ynPTdvhWMcdX7mh23Au1QpVS3ekTCQzpRTtd1g6h3\nMar 23 14:37:08 demo-pyrsia-node-2 pyrsia_node[42678]:  INFO  pyrsia::network::handlers         > Dialed "/ip4/34.66.158.102/tcp/44000"\n')),(0,o.kt)("h2",{id:"use-pyrsia"},"Use Pyrsia"),(0,o.kt)("p",null,"Keep the log tail from the installation phase running and open a new terminal\non both instances. (doesn\u2019t have to be ",(0,o.kt)("inlineCode",{parentName:"p"},"root"),")"),(0,o.kt)("p",null,"First on ",(0,o.kt)("inlineCode",{parentName:"p"},"node1"),", pull any Docker image:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"docker pull alpine\n")),(0,o.kt)("p",null,"(make sure to remove it from the local Docker cache if you already pulled it\nbefore: ",(0,o.kt)("inlineCode",{parentName:"p"},"docker rmi alpine"),")"),(0,o.kt)("p",null,"Look at the syslog to show what happened. Alternatively grep the syslog for \u2018Step\u2019."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'cat /var/log/syslog | grep Step\n> Step 1: Does "sha256:e9adb5357e84d853cc3eb08cd4d3f9bd6cebdb8a67f0415cc884be7b0202416d" exist in the artifact manager?\n> Step 1: NO, "sha256:e9adb5357e84d853cc3eb08cd4d3f9bd6cebdb8a67f0415cc884be7b0202416d" does not exist in the artifact manager.\n> Step 3: Retrieving "sha256:e9adb5357e84d853cc3eb08cd4d3f9bd6cebdb8a67f0415cc884be7b0202416d" from docker.io\n> Step 3: "sha256:e9adb5357e84d853cc3eb08cd4d3f9bd6cebdb8a67f0415cc884be7b0202416d" successfully stored locally from docker.io\n> Final Step: "sha256:e9adb5357e84d853cc3eb08cd4d3f9bd6cebdb8a67f0415cc884be7b0202416d" successfully retrieved!\n> Step 3: "sha256:3d243047344378e9b7136d552d48feb7ea8b6fe14ce0990e0cc011d5e369626a" successfully stored locally from docker.io\n > Final Step: "sha256:3d243047344378e9b7136d552d48feb7ea8b6fe14ce0990e0cc011d5e369626a" successfully retrieved!\n')),(0,o.kt)("p",null,"It shows that Pyrsia didn\u2019t have the image yet, but it fetched it from Docker Hub instead."),(0,o.kt)("p",null,"Next on ",(0,o.kt)("inlineCode",{parentName:"p"},"node2"),", pull the same Docker image:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"docker pull alpine\n")),(0,o.kt)("p",null,"Inspect the syslog on ",(0,o.kt)("inlineCode",{parentName:"p"},"node2"),", or grep for \u2018Steps\u2019:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'> Step 1: Does "sha256:e9adb5357e84d853cc3eb08cd4d3f9bd6cebdb8a67f0415cc884be7b0202416d" exist in the artifact manager?\n> Step 1: Does "sha256:3d243047344378e9b7136d552d48feb7ea8b6fe14ce0990e0cc011d5e369626a" exist in the artifact manager?\n> Step 1: NO, "sha256:e9adb5357e84d853cc3eb08cd4d3f9bd6cebdb8a67f0415cc884be7b0202416d" does not exist in the artifact manager.\n> Step 1: NO, "sha256:3d243047344378e9b7136d552d48feb7ea8b6fe14ce0990e0cc011d5e369626a" does not exist in the artifact manager.\n> Step 2: Does "sha256:3d243047344378e9b7136d552d48feb7ea8b6fe14ce0990e0cc011d5e369626a" exist in the Pyrsia network?\n> Step 2: Does "sha256:e9adb5357e84d853cc3eb08cd4d3f9bd6cebdb8a67f0415cc884be7b0202416d" exist in the Pyrsia network?\n> Step 2: YES, "sha256:e9adb5357e84d853cc3eb08cd4d3f9bd6cebdb8a67f0415cc884be7b0202416d" exists in the Pyrsia network.\n> Step 2: "sha256:e9adb5357e84d853cc3eb08cd4d3f9bd6cebdb8a67f0415cc884be7b0202416d" successfully stored locally from Pyrsia network.\n> Final Step: "sha256:e9adb5357e84d853cc3eb08cd4d3f9bd6cebdb8a67f0415cc884be7b0202416d" successfully retrieved!\n> Step 2: YES, "sha256:3d243047344378e9b7136d552d48feb7ea8b6fe14ce0990e0cc011d5e369626a" exists in the Pyrsia network.\n> Step 2: "sha256:3d243047344378e9b7136d552d48feb7ea8b6fe14ce0990e0cc011d5e369626a" successfully stored locally from Pyrsia network.\n> Final Step: "sha256:3d243047344378e9b7136d552d48feb7ea8b6fe14ce0990e0cc011d5e369626a" successfully retrieved!\n')),(0,o.kt)("p",null,"This shows the image wasn't available locally, but it was available in the\nPyrsia network, retrieved and stored locally."),(0,o.kt)("p",null,"Next, remove the image from the local docker cache, and retrieve it again:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"docker rmi alpine\ndocker pull alpine\n")),(0,o.kt)("p",null,"Inspect the syslog on ",(0,o.kt)("inlineCode",{parentName:"p"},"node2")," again:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'> Step 1: YES, "sha256:e9adb5357e84d853cc3eb08cd4d3f9bd6cebdb8a67f0415cc884be7b0202416d" exist in the artifact manager.\n> Final Step: "sha256:3d243047344378e9b7136d552d48feb7ea8b6fe14ce0990e0cc011d5e369626a" successfully retrieved!\n> Final Step: "sha256:e9adb5357e84d853cc3eb08cd4d3f9bd6cebdb8a67f0415cc884be7b0202416d" successfully retrieved!\n')),(0,o.kt)("p",null,"It will show the local Pyrsia node already had this Docker image and didn\u2019t\nhave to download it again. Inspect the Pyrsia node status again on both nodes:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"pyrsia -s\n")),(0,o.kt)("p",null,"You should see something very similar to:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'Connected Peers Count:       1\nArtifacts Count:             3 {"manifests": 1, "blobs": 2}\nTotal Disk Space Allocated:  5.84 GB\nDisk Space Used:             0.0002%\n')))}m.isMDXComponent=!0},11748:function(e,t,a){var n={"./locale":89234,"./locale.js":89234};function s(e){var t=o(e);return a(t)}function o(e){if(!a.o(n,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n[e]}s.keys=function(){return Object.keys(n)},s.resolve=o,e.exports=s,s.id=11748}}]);