"use strict";(self.webpackChunkpyrsia=self.webpackChunkpyrsia||[]).push([[5450],{3905:function(e,a,t){t.d(a,{Zo:function(){return d},kt:function(){return f}});var i=t(67294);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);a&&(i=i.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function c(e,a){if(null==e)return{};var t,i,n=function(e,a){if(null==e)return{};var t,i,n={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var l=i.createContext({}),s=function(e){var a=i.useContext(l),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},d=function(e){var a=s(e.components);return i.createElement(l.Provider,{value:a},e.children)},p={inlineCode:"code",wrapper:function(e){var a=e.children;return i.createElement(i.Fragment,{},a)}},u=i.forwardRef((function(e,a){var t=e.components,n=e.mdxType,r=e.originalType,l=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=s(t),f=n,b=u["".concat(l,".").concat(f)]||u[f]||p[f]||r;return t?i.createElement(b,o(o({ref:a},d),{},{components:t})):i.createElement(b,o({ref:a},d))}));function f(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var r=t.length,o=new Array(r);o[0]=u;var c={};for(var l in a)hasOwnProperty.call(a,l)&&(c[l]=a[l]);c.originalType=e,c.mdxType="string"==typeof e?e:n,o[1]=c;for(var s=2;s<r;s++)o[s]=t[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},13002:function(e,a,t){t.r(a),t.d(a,{assets:function(){return d},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return p}});var i=t(87462),n=t(63366),r=(t(67294),t(3905)),o=["components"],c={custom_edit_url:"https://github.com/pyrsia/pyrsia/edit/main/docs/tutorials/build_from_source_docker.md"},l="How to setup a Pyrsia node to build Docker images from source",s={unversionedId:"tutorials/build_from_source_docker",id:"tutorials/build_from_source_docker",title:"How to setup a Pyrsia node to build Docker images from source",description:"Warning: The build-from-source demo is still work-in-progress.",source:"@site/docs/tutorials/build_from_source_docker.md",sourceDirName:"tutorials",slug:"/tutorials/build_from_source_docker",permalink:"/docs/tutorials/build_from_source_docker",draft:!1,editUrl:"https://github.com/pyrsia/pyrsia/edit/main/docs/tutorials/build_from_source_docker.md",tags:[],version:"current",frontMatter:{custom_edit_url:"https://github.com/pyrsia/pyrsia/edit/main/docs/tutorials/build_from_source_docker.md"},sidebar:"tutorialSidebar",previous:{title:"Quick Installation",permalink:"/docs/tutorials/quick-installation"},next:{title:"How to setup a Pyrsia node to build Maven libraries from source",permalink:"/docs/tutorials/build_from_source_maven"}},d={},p=[{value:"Compile Pyrsia",id:"compile-pyrsia",level:2},{value:"Run the Pyrsia node",id:"run-the-pyrsia-node",level:2},{value:"Run build pipeline prototype",id:"run-build-pipeline-prototype",level:2},{value:"Trigger a build from source for a given artifact",id:"trigger-a-build-from-source-for-a-given-artifact",level:2},{value:"Wait for the build to finish in the build pipeline",id:"wait-for-the-build-to-finish-in-the-build-pipeline",level:2},{value:"Try to reach consensus with the other authorized nodes",id:"try-to-reach-consensus-with-the-other-authorized-nodes",level:2},{value:"Create a transparency log about the artifact publication",id:"create-a-transparency-log-about-the-artifact-publication",level:2},{value:"Publish the artifact on the p2p network",id:"publish-the-artifact-on-the-p2p-network",level:2},{value:"Use Pyrsia with Docker pull",id:"use-pyrsia-with-docker-pull",level:2},{value:"Configure Docker desktop to use node A as registry mirror",id:"configure-docker-desktop-to-use-node-a-as-registry-mirror",level:3},{value:"Pull <code>alpine</code> docker image",id:"pull-alpine-docker-image",level:2},{value:"Inspect the transparency logs",id:"inspect-the-transparency-logs",level:2}],u={toc:p};function f(e){var a=e.components,t=(0,n.Z)(e,o);return(0,r.kt)("wrapper",(0,i.Z)({},u,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"how-to-setup-a-pyrsia-node-to-build-docker-images-from-source"},"How to setup a Pyrsia node to build Docker images from source"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Warning:")," The build-from-source demo is still work-in-progress.")),(0,r.kt)("p",null,"This tutorial describes how to setup a Pyrsia node that can build Docker images\nfrom source with the goal to publish them in the Pyrsia network. (Note: in the\ncurrent prototype, the build pipeline does not actually build the image, but\ndownloads them from Docker Hub instead)."),(0,r.kt)("p",null,"Ultimately, the following scenario will be used, but for now some steps\n(indicated below) are skipped for the purpose of this build-from-source demo:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Setup at least 3 authorized nodes (Skipped in this demo, only one Pyrsia node\nis used)"),(0,r.kt)("li",{parentName:"ul"},"Set up a build pipeline per Pyrsia node and configure the nodes to use them"),(0,r.kt)("li",{parentName:"ul"},"Trigger a build from source for a given artifact"),(0,r.kt)("li",{parentName:"ul"},"Wait for the build to finish in the build pipeline"),(0,r.kt)("li",{parentName:"ul"},"Try to reach consensus with the other authorized nodes, which have to run the\nsame build and verify they produce the same build result. (Skipped in this demo)"),(0,r.kt)("li",{parentName:"ul"},"Create a transparency log about the artifact publication"),(0,r.kt)("li",{parentName:"ul"},"Publish the artifact on the p2p network")),(0,r.kt)("p",null,"See the ",(0,r.kt)("a",{parentName:"p",href:"/docs/developers/pyrsia-architecture-and-use-cases"},"architecture and use-cases"),"\ndocument for more information."),(0,r.kt)("p",null,"Because this demo scenario results in a published Docker image in the Pyrsia\nnetwork, we can run a final step to show the build from source worked:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Use docker pull to pull the docker image from the Pyrsia network")),(0,r.kt)("h2",{id:"compile-pyrsia"},"Compile Pyrsia"),(0,r.kt)("p",null,"Download a fresh copy of the codebase by cloning the repo or updating to the\nHEAD of ",(0,r.kt)("inlineCode",{parentName:"p"},"main"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"git clone https://github.com/pyrsia/pyrsia.git\n")),(0,r.kt)("p",null,"Let's call this folder ",(0,r.kt)("inlineCode",{parentName:"p"},"PYRSIA_HOME"),". We will refer to this\nname in the following steps."),(0,r.kt)("p",null,"Build binaries by running:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"cd $PYRSIA_HOME\ncargo build --workspace\n")),(0,r.kt)("p",null,"See the ",(0,r.kt)("a",{parentName:"p",href:"/docs/community/get_involved/local_dev_setup"},"Development Environment"),"\ndocument for more information."),(0,r.kt)("h2",{id:"run-the-pyrsia-node"},"Run the Pyrsia node"),(0,r.kt)("p",null,"Now we will set the following env vars and start a pyrsia node:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"RUST_LOG: to make sure we can see all the debug logs"),(0,r.kt)("li",{parentName:"ul"},"DEV_MODE: to make sure all non-existing directories are created on-the-fly"),(0,r.kt)("li",{parentName:"ul"},"PYRSIA_ARTIFACT_PATH: pointing to a directory to store artifacts. optionally\nremove this directory prior to starting Pyrsia if you want to start from an\nempty state.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"RUST_LOG=pyrsia=debug DEV_MODE=on PYRSIA_ARTIFACT_PATH=/tmp/pyrsia \\\ncargo run --package pyrsia_node -- --pipeline-service-endpoint http://localhost:8080 -H 0.0.0.0 --listen-only true\n")),(0,r.kt)("p",null,"As you can see, we specified the ",(0,r.kt)("inlineCode",{parentName:"p"},"--pipeline-service-endpoint")," argument to point\nto ",(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:8080"),", which is where we will run our build pipeline prototype\n(see below). In a production setup, the build pipeline needs to run on its\nown isolated infrastructure."),(0,r.kt)("h2",{id:"run-build-pipeline-prototype"},"Run build pipeline prototype"),(0,r.kt)("p",null,"In this demo, we use a build pipeline prototype. Eventually, Pyrsia will use\nindustry-standard build pipeline solutions. Integration with such solutions is\ncurrently being investigated."),(0,r.kt)("p",null,"The most important features of the build pipeline are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"it runs completely separate from the Pyrsia node"),(0,r.kt)("li",{parentName:"ul"},"it exposes an interface so Pyrsia can start a build"),(0,r.kt)("li",{parentName:"ul"},"it exposes an interface so Pyrsia can download the build output")),(0,r.kt)("p",null,"The current build pipeline prototype supports Maven and Docker builds."),(0,r.kt)("p",null,"Download or clone the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/tiainen/pyrsia_build_pipeline_prototype"},"prototype repo"),"\nand run as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"cd pyrsia_build_pipeline_prototype\nRUST_LOG=debug cargo run\n")),(0,r.kt)("p",null,"By default, this prototype listens on http port 8080. If you run it on a different\nhost or port, make sure to specify its location when starting the Pyrsia node\nwith ",(0,r.kt)("inlineCode",{parentName:"p"},"--pipeline-service-endpoint")," (see above)."),(0,r.kt)("p",null,"You will see the following output indicating that the build pipeline is ready for use"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"   Finished dev [unoptimized + debuginfo] target(s) in 1m 07s\n     Running `target/debug/pyrsia_build`\n INFO  actix_server::builder > Starting 8 workers\n INFO  actix_server::server  > Tokio runtime found; starting in existing Tokio runtime\n")),(0,r.kt)("h2",{id:"trigger-a-build-from-source-for-a-given-artifact"},"Trigger a build from source for a given artifact"),(0,r.kt)("p",null,"In this section we will trigger a build for ",(0,r.kt)("inlineCode",{parentName:"p"},"alpine:3.16"),"."),(0,r.kt)("p",null,"We will use the Pyrsia CLI to trigger a build from source. In a new terminal, while\nthe Pyrsia node and build pipeline prototype are running, check if your Pyrsia CLI\nconfig is correct:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"cd $PYRSIA_HOME/target/debug\n./pyrsia config --show\nhost = 'localhost'\nport = '7888'\ndisk_allocated = '5.84 GB'\n")),(0,r.kt)("p",null,"If you're not using the default port for your Pyrsia node, make sure to configure\nthe CLI using ",(0,r.kt)("inlineCode",{parentName:"p"},"./pyrsia config --add"),"."),(0,r.kt)("p",null,"Then trigger the build from source, like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"./pyrsia build docker --image alpine:3.16\n")),(0,r.kt)("p",null,"The build trigger should return immediately providing a build ID:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"Build request successfully handled. Build with ID c9ca3e57-aa84-4fab-a8be-381ab31e4916 has been started.\n")),(0,r.kt)("h2",{id:"wait-for-the-build-to-finish-in-the-build-pipeline"},"Wait for the build to finish in the build pipeline"),(0,r.kt)("p",null,"In the Pyrsia node logs, you will see that a build has been started and the Pyrsia\nnode is now waiting for its result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'INFO  pyrsia_registry > 127.0.0.1:50187 "POST /build/docker HTTP/1.1" 200 "-" "-" 42.826041ms\nDEBUG pyrsia::build_service::service > Updated build info: BuildInfo { id: "c9ca3e57-aa84-4fab-a8be-381ab31e4916", status: Running }\n')),(0,r.kt)("p",null,"In the build pipeline prototype you should see that build starting:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"#######################################################\n#\n# Starting Docker build for:\n#   alpine:3.16\n#\n#######################################################\n...\n")),(0,r.kt)("p",null,"Do note that the build pipeline prototype will not actually build the docker image,\nbut instead download it from Docker Hub."),(0,r.kt)("p",null,"Once the build has finished, the status request from the Pyrsia node will contain:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'DEBUG pyrsia::build_service::event   > Handle BuildEvent: Result\n{\n   "build_id":"c9ca3e57-aa84-4fab-a8be-381ab31e4916",\n   "build_trigger":"FromSource",\n   "build_result":"BuildResult"{\n      "package_type":"Docker",\n      "package_specific_id":"alpine:3.16",\n      "artifacts":[\n         "BuildResultArtifact"{\n            "artifact_specific_id":"alpine:3.16",\n            "artifact_location":"/private/tmp/pyrsia/builds/c9ca3e57-aa84-4fab-a8be-381ab31e4916/1304f174557314a7ed9eddb4eab12fed12cb0cd9809e4c28f29af86979a3c870",\n            "artifact_hash":"1304f174557314a7ed9eddb4eab12fed12cb0cd9809e4c28f29af86979a3c870"\n         },\n         "BuildResultArtifact"{\n            "artifact_specific_id":"alpine@sha256:1304f174557314a7ed9eddb4eab12fed12cb0cd9809e4c28f29af86979a3c870",\n            "artifact_location":"/private/tmp/pyrsia/builds/c9ca3e57-aa84-4fab-a8be-381ab31e4916/1304f174557314a7ed9eddb4eab12fed12cb0cd9809e4c28f29af86979a3c870",\n            "artifact_hash":"1304f174557314a7ed9eddb4eab12fed12cb0cd9809e4c28f29af86979a3c870"\n         },\n         "BuildResultArtifact"{\n            "artifact_specific_id":"alpine@sha256:213ec9aee27d8be045c6a92b7eac22c9a64b44558193775a1a7f626352392b49",\n            "artifact_location":"/private/tmp/pyrsia/builds/c9ca3e57-aa84-4fab-a8be-381ab31e4916/213ec9aee27d8be045c6a92b7eac22c9a64b44558193775a1a7f626352392b49",\n            "artifact_hash":"213ec9aee27d8be045c6a92b7eac22c9a64b44558193775a1a7f626352392b49"\n         },\n         "BuildResultArtifact"{\n            "artifact_specific_id":"alpine@sha256:9c6f0724472873bb50a2ae67a9e7adcb57673a183cea8b06eb778dca859181b5",\n            "artifact_location":"/private/tmp/pyrsia/builds/c9ca3e57-aa84-4fab-a8be-381ab31e4916/9c6f0724472873bb50a2ae67a9e7adcb57673a183cea8b06eb778dca859181b5",\n            "artifact_hash":"9c6f0724472873bb50a2ae67a9e7adcb57673a183cea8b06eb778dca859181b5"\n         }\n      ]\n   }\n}\nINFO  pyrsia::artifact_service::service > Build with ID c9ca3e57-aa84-4fab-a8be-381ab31e4916 completed successfully for package type Docker and package specific ID alpine:3.16\n')),(0,r.kt)("h2",{id:"try-to-reach-consensus-with-the-other-authorized-nodes"},"Try to reach consensus with the other authorized nodes"),(0,r.kt)("p",null,"In a regular scenario, the Pyrsia node will now try to reach consensus with the\nother authorized nodes, but this step is skipped in this demo."),(0,r.kt)("h2",{id:"create-a-transparency-log-about-the-artifact-publication"},"Create a transparency log about the artifact publication"),(0,r.kt)("p",null,"When consensus has been reached, a transparency log is created for each built artifact."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'INFO  pyrsia::artifact_service::service > Adding artifact to transparency log: AddArtifactRequest { package_type: Docker, package_specific_id: "alpine:3.16", num_artifacts: 4, package_specific_artifact_id: "alpine:3.16", artifact_hash: "1304f174557314a7ed9eddb4eab12fed12cb0cd9809e4c28f29af86979a3c870" }\npyrsia::transparency_log::log     > Transparency log inserted into database with id: cc3dec20-8604-4d0a-8c18-ccb746769696\nINFO  pyrsia::artifact_service::service > Transparency Log for build with ID c9ca3e57-aa84-4fab-a8be-381ab31e4916 successfully added. Adding artifact locally: TransparencyLog { id: "cc3dec20-8604-4d0a-8c18-ccb746769696", package_type: Docker, package_specific_id: "alpine:3.16", num_artifacts: 4, package_specific_artifact_id: "alpine:3.16", artifact_hash: "1304f174557314a7ed9eddb4eab12fed12cb0cd9809e4c28f29af86979a3c870", source_hash: "", artifact_id: "75c7bd83-1dd4-4666-a35f-e8c59b695e21", source_id: "7ec06216-b2dc-4e5a-a90d-7875fb77b846", timestamp: 1660906467, operation: AddArtifact, node_id: "64765410-136b-4332-a837-226bd062ba37", node_public_key: "558b0373-a29d-40c9-8125-019fb74dda31" }\n')),(0,r.kt)("p",null,"Example for ",(0,r.kt)("inlineCode",{parentName:"p"},"alpine:3.16"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'{\n   "id":"cc3dec20-8604-4d0a-8c18-ccb746769696",\n   "package_type":"Docker",\n   "package_specific_id":"alpine:3.16",\n   "num_artifacts":4,\n   "package_specific_artifact_id":"alpine:3.16",\n   "artifact_hash":"1304f174557314a7ed9eddb4eab12fed12cb0cd9809e4c28f29af86979a3c870",\n   "source_hash":"",\n   "artifact_id":"75c7bd83-1dd4-4666-a35f-e8c59b695e21",\n   "source_id":"7ec06216-b2dc-4e5a-a90d-7875fb77b846",\n   "timestamp":1660906467,\n   "operation":"AddArtifact",\n   "node_id":"64765410-136b-4332-a837-226bd062ba37",\n   "node_public_key":"558b0373-a29d-40c9-8125-019fb74dda31"\n}\n')),(0,r.kt)("h2",{id:"publish-the-artifact-on-the-p2p-network"},"Publish the artifact on the p2p network"),(0,r.kt)("p",null,"As a final step in the build from source scenario, the artifacts are stored locally\nand provided on the p2p network."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},' INFO  pyrsia::artifact_service::service > put_artifact with id: da341557-9150-4208-9474-f5884f799338\n INFO  pyrsia::artifact_service::storage > An artifact is being pushed to the artifact manager da341557-9150-4208-9474-f5884f799338\n DEBUG pyrsia::network::client           > p2p::Client::provide "da341557-9150-4208-9474-f5884f799338"\n')),(0,r.kt)("p",null,"Now we are ready to use the published artifacts in our build workflow as shown in\nthe sample section below."),(0,r.kt)("h2",{id:"use-pyrsia-with-docker-pull"},"Use Pyrsia with Docker pull"),(0,r.kt)("p",null,"Now that we have a Pyrsia network including a published Docker image, we can start\nusing Pyrsia with Docker."),(0,r.kt)("h3",{id:"configure-docker-desktop-to-use-node-a-as-registry-mirror"},"Configure Docker desktop to use node A as registry mirror"),(0,r.kt)("p",null,"In your Docker desktop installation -> Settings -> Docker Engine where Docker\nallows you to set registry-mirrors. Setup node A as a registry mirror by\nadding/editing the following in the configuration."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsonc"},' "registry-mirrors": [\n   "http://192.168.0.110:7888" // (IP address of host machine and port number of your Pyrsia node)\n ]\n')),(0,r.kt)("p",null,"Note: if you're using Linux, you'll find this file in ",(0,r.kt)("inlineCode",{parentName:"p"},"/etc/docker/daemon.json"),"."),(0,r.kt)("p",null,"On Mac OS X using localhost does not work (because the request is made from the\nDocker Desktop VM), so you will need to specify the IP address of host machine.\nOn Linux you can use localhost."),(0,r.kt)("p",null,"You will need to restart Docker Desktop. Once restarted you should be able to\npull Docker images through Pyrsia."),(0,r.kt)("h2",{id:"pull-alpine-docker-image"},"Pull ",(0,r.kt)("inlineCode",{parentName:"h2"},"alpine")," docker image"),(0,r.kt)("p",null,"First make sure Alpine is not in local Docker cache, then pull Alpine:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"docker rmi alpine:3.16 # remove alpine from local docker cache\ndocker pull alpine:3.16\n")),(0,r.kt)("p",null,"You'll see this in the Pyrsia logs:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'INFO  pyrsia_registry                         > 192.168.0.227:64436 "GET /v2/ HTTP/1.1" 200 "-" "docker/20.10.17 go/go1.17.11 git-commit/a89b842 kernel/5.10.104-linuxkit os/linux arch/arm64 UpstreamClient(Docker-Client/20.10.17 \\(darwin\\))" 76.666\xb5s\nDEBUG pyrsia::docker::v2::handlers::manifests > Fetching manifest for alpine with tag: 3.16\nINFO  pyrsia::artifact_service::storage       > An artifact is being pulled from the artifact manager b0ed9f25-f322-47ef-8dac-03154209cfcf\nINFO  pyrsia_registry                         > 192.168.0.227:64437 "HEAD /v2/library/alpine/manifests/3.16 HTTP/1.1" 200 "-" "docker/20.10.17 go/go1.17.11 git-commit/a89b842 kernel/5.10.104-linuxkit os/linux arch/arm64 UpstreamClient(Docker-Client/20.10.17 \\(darwin\\))" 1.04075ms\n')),(0,r.kt)("p",null,"Indicating that the Alpine image was pulled from Pyrsia."),(0,r.kt)("h2",{id:"inspect-the-transparency-logs"},"Inspect the transparency logs"),(0,r.kt)("p",null,"The transparency logs that were created as part of the build from source process,\ncan be inspected using the Pyrsia CLI."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"./pyrsia inspect-log docker --image alpine:3.16\n")),(0,r.kt)("p",null,"This CLI command returns the transparency logs for all the Pyrsia artifacts that\nmake up the Docker image ",(0,r.kt)("inlineCode",{parentName:"p"},"alpine:3.16"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'[\n  {\n    "id": "cc3dec20-8604-4d0a-8c18-ccb746769696",\n    "package_type": "Docker",\n    "package_specific_id": "alpine:3.16",\n    "num_artifacts": 4,\n    "package_specific_artifact_id": "alpine:3.16",\n    "artifact_hash": "1304f174557314a7ed9eddb4eab12fed12cb0cd9809e4c28f29af86979a3c870",\n    "source_hash": "",\n    "artifact_id": "75c7bd83-1dd4-4666-a35f-e8c59b695e21",\n    "source_id": "7ec06216-b2dc-4e5a-a90d-7875fb77b846",\n    "timestamp": 1660906467,\n    "operation": "AddArtifact",\n    "node_id": "64765410-136b-4332-a837-226bd062ba37",\n    "node_public_key": "558b0373-a29d-40c9-8125-019fb74dda31"\n  },\n  {\n    "id": "d88982b1-261b-4e3d-9eb2-dd549c40ac05",\n    "package_type": "Docker",\n    "package_specific_id": "alpine:3.16",\n    "num_artifacts": 4,\n    "package_specific_artifact_id": "alpine@sha256:1304f174557314a7ed9eddb4eab12fed12cb0cd9809e4c28f29af86979a3c870",\n    "artifact_hash": "1304f174557314a7ed9eddb4eab12fed12cb0cd9809e4c28f29af86979a3c870",\n    "source_hash": "",\n    "artifact_id": "f2648155-b665-4567-9e3c-27af7cc3b9bb",\n    "source_id": "0ca693f9-7c50-4448-9cd6-0d7a145fba14",\n    "timestamp": 1660906529,\n    "operation": "AddArtifact",\n    "node_id": "60b7d9ae-d5ba-4440-ab83-6c5638a18a45",\n    "node_public_key": "4a873a2a-0e04-4540-b1bd-bccc0d721ed2"\n  },\n  {\n    "id": "f53f9cc6-6998-470a-8094-cae3fbc82412",\n    "package_type": "Docker",\n    "package_specific_id": "alpine:3.16",\n    "num_artifacts": 4,\n    "package_specific_artifact_id": "alpine@sha256:213ec9aee27d8be045c6a92b7eac22c9a64b44558193775a1a7f626352392b49",\n    "artifact_hash": "213ec9aee27d8be045c6a92b7eac22c9a64b44558193775a1a7f626352392b49",\n    "source_hash": "",\n    "artifact_id": "dac2e42c-fd48-4487-b48c-34f5eac1f674",\n    "source_id": "eed938e9-9cf8-4e1b-995f-6a6d1da6ef26",\n    "timestamp": 1660906589,\n    "operation": "AddArtifact",\n    "node_id": "1e3244e3-1fc5-429b-8cc6-43dbbebaccb2",\n    "node_public_key": "7d7d96c0-1b8b-4028-bb20-df9a45eeaa7f"\n  },\n  {\n    "id": "cae2f5a7-22ec-4d22-86af-59e1f0239056",\n    "package_type": "Docker",\n    "package_specific_id": "alpine:3.16",\n    "num_artifacts": 4,\n    "package_specific_artifact_id": "alpine@sha256:9c6f0724472873bb50a2ae67a9e7adcb57673a183cea8b06eb778dca859181b5",\n    "artifact_hash": "9c6f0724472873bb50a2ae67a9e7adcb57673a183cea8b06eb778dca859181b5",\n    "source_hash": "",\n    "artifact_id": "3fc0ac72-8f5e-41fe-8ab6-94c565ebc52c",\n    "source_id": "4cb49c33-af4c-4c3a-8053-b771007a6720",\n    "timestamp": 1660906649,\n    "operation": "AddArtifact",\n    "node_id": "64d30c8e-d356-420c-ab87-e27687ca6f1d",\n    "node_public_key": "57130e5d-d0dc-450b-b80d-966cb71210ef"\n  }\n]\n')))}f.isMDXComponent=!0}}]);